{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4","program":"/Users/errol_hava/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","rand","--edition=2018","/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"rand_hc\"","--cfg","feature=\"std_rng\"","-C","metadata=611b0f6edba44d6e","-C","extra-filename=-611b0f6edba44d6e","--out-dir","/Users/errol_hava/Documents/Code/VScode/Dock/crypto/vb_accumulator/target/rls/debug/deps","-L","dependency=/Users/errol_hava/Documents/Code/VScode/Dock/crypto/vb_accumulator/target/rls/debug/deps","--extern","rand_chacha=/Users/errol_hava/Documents/Code/VScode/Dock/crypto/vb_accumulator/target/rls/debug/deps/librand_chacha-e48cf8a8ec8291ef.rmeta","--extern","rand_core=/Users/errol_hava/Documents/Code/VScode/Dock/crypto/vb_accumulator/target/rls/debug/deps/librand_core-f5aa5f05c53446ce.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/errol_hava/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/errol_hava/Documents/Code/VScode/Dock/crypto/vb_accumulator/target/rls/debug/deps/librand-611b0f6edba44d6e.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[12278534876194438048,0]},"crate_root":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src","external_crates":[{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","num":4,"id":{"name":"rand_core","disambiguator":[460307942124180363,0]}},{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","num":5,"id":{"name":"rand_chacha","disambiguator":[14625937639366773409,0]}},{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","num":6,"id":{"name":"ppv_lite86","disambiguator":[2970447391689438984,0]}}],"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":408,"byte_end":6712,"line_start":10,"line_end":215,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":145},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2860,"byte_end":2869,"line_start":95,"line_end":95,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":98},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2871,"byte_end":2876,"line_start":95,"line_end":95,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":140},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2878,"byte_end":2885,"line_start":95,"line_end":95,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":146},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2887,"byte_end":2898,"line_start":95,"line_end":95,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11306,"byte_end":11315,"line_start":108,"line_end":108,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":259}},{"kind":"Use","ref_id":{"krate":0,"index":618},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11594,"byte_end":11603,"line_start":119,"line_end":119,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":625},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11605,"byte_end":11619,"line_start":119,"line_end":119,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11651,"byte_end":11663,"line_start":120,"line_end":120,"column_start":30,"column_end":42},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":639},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11665,"byte_end":11673,"line_start":120,"line_end":120,"column_start":44,"column_end":52},"alias_span":null,"name":"DistIter","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":651},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11675,"byte_end":11682,"line_start":120,"line_end":120,"column_start":54,"column_end":61},"alias_span":null,"name":"DistMap","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":672},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11773,"byte_end":11779,"line_start":123,"line_end":123,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":673},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11773,"byte_end":11779,"line_start":123,"line_end":123,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":665},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11781,"byte_end":11793,"line_start":123,"line_end":123,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":666},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11781,"byte_end":11793,"line_start":123,"line_end":123,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":745},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11817,"byte_end":11829,"line_start":124,"line_end":124,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":746},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11817,"byte_end":11829,"line_start":124,"line_end":124,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":1064},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11852,"byte_end":11857,"line_start":125,"line_end":125,"column_start":22,"column_end":27},"alias_span":null,"name":"Slice","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":1138},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11897,"byte_end":11904,"line_start":127,"line_end":127,"column_start":24,"column_end":31},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145881,"byte_end":145893,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":0,"index":1776},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":146041,"byte_end":146047,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":0,"index":588},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":146188,"byte_end":146202,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":0,"index":578},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":146204,"byte_end":146215,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":4,"index":145},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":146357,"byte_end":146366,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":0,"index":494},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":146368,"byte_end":146371,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":4,"index":140},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":146373,"byte_end":146380,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":4,"index":146},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":146382,"byte_end":146393,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":432}},{"kind":"Use","ref_id":{"krate":0,"index":1776},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":171153,"byte_end":171159,"line_start":115,"line_end":115,"column_start":48,"column_end":54},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":524}},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":3120,"byte_end":3124,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":494},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":3126,"byte_end":3129,"line_start":107,"line_end":107,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":408,"byte_end":6712,"line_start":10,"line_end":215,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":432},{"krate":0,"index":459},{"krate":0,"index":524},{"krate":0,"index":574},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":615}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Quick Start","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ functionality on top of RNGs.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ nums.shuffle(&mut rng);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # The Book","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For the user guide and further documentation, please read","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"/ [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":1857,"byte_end":1867,"line_start":51,"line_end":51,"column_start":1,"column_end":11}},{"value":"allow(clippy :: float_cmp, clippy :: neg_cmp_op_on_partial_ord,)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2034,"byte_end":2108,"line_start":55,"line_end":58,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":22},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":47},{"krate":0,"index":87},{"krate":0,"index":108},{"krate":0,"index":158},{"krate":0,"index":203},{"krate":0,"index":222},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"/ Generating random samples from probability distributions","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7122,"byte_end":7182,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7183,"byte_end":7186,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7187,"byte_end":7263,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ implementations. It is the workhorse behind some of the convenient","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7264,"byte_end":7334,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ functionality of the [`Rng`] trait, e.g. [`Rng::gen`] and of course","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7335,"byte_end":7406,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ [`Rng::sample`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7407,"byte_end":7427,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7428,"byte_end":7431,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7432,"byte_end":7505,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ occurrence of each value in its sample space.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7506,"byte_end":7555,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7556,"byte_end":7559,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7560,"byte_end":7638,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7639,"byte_end":7712,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ according to the distribution `X` represents, using an external source of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7713,"byte_end":7790,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ randomness (an RNG supplied to the `sample` function).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7791,"byte_end":7849,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7850,"byte_end":7853,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7854,"byte_end":7924,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7925,"byte_end":7998,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ but it may have internal parameters set at construction time (for example,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":7999,"byte_end":8077,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8078,"byte_end":8158,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8159,"byte_end":8162,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8163,"byte_end":8166,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # The `Standard` distribution","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8167,"byte_end":8200,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8201,"byte_end":8204,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8205,"byte_end":8275,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8276,"byte_end":8349,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ produce a random value for many different types, including most primitive","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8350,"byte_end":8427,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8428,"byte_end":8504,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ [`Standard`] for more details.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8505,"byte_end":8539,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8540,"byte_end":8543,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8544,"byte_end":8623,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8624,"byte_end":8698,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ with the [`random`] function.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8699,"byte_end":8732,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8733,"byte_end":8736,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Random characters","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8737,"byte_end":8761,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8762,"byte_end":8765,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8766,"byte_end":8840,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8841,"byte_end":8918,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ `char`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8919,"byte_end":8930,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8931,"byte_end":8934,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8935,"byte_end":8938,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Uniform numeric ranges","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8939,"byte_end":8967,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8968,"byte_end":8971,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":8972,"byte_end":9049,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9050,"byte_end":9125,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9126,"byte_end":9201,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9202,"byte_end":9280,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9281,"byte_end":9284,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Values may be sampled from this distribution using [`Rng::sample(Range)`] or","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9285,"byte_end":9365,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ by creating a distribution object with [`Uniform::new`],","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9366,"byte_end":9426,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/ [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9427,"byte_end":9505,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ known at compile time it is typically faster to reuse an existing","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9506,"byte_end":9575,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ `Uniform` object than to call [`Rng::sample(Range)`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9576,"byte_end":9633,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9634,"byte_end":9637,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9638,"byte_end":9710,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9711,"byte_end":9783,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ documentation in the [`uniform`] module). Doing so enables generation of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9784,"byte_end":9860,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ values of type `T` with  [`Rng::sample(Range)`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9861,"byte_end":9913,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9914,"byte_end":9917,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Open and half-open ranges","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9918,"byte_end":9950,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9951,"byte_end":9954,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":9955,"byte_end":10030,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10031,"byte_end":10107,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10108,"byte_end":10189,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/ [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10190,"byte_end":10273,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"/ [`Standard`] documentation for more details.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10274,"byte_end":10322,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10323,"byte_end":10326,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Non-uniform sampling","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10327,"byte_end":10353,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10354,"byte_end":10357,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10358,"byte_end":10435,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10436,"byte_end":10507,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10508,"byte_end":10511,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10512,"byte_end":10581,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ [`WeightedIndex`] distribution.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10582,"byte_end":10617,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10618,"byte_end":10621,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10622,"byte_end":10696,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10697,"byte_end":10768,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10769,"byte_end":10772,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10773,"byte_end":10776,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10777,"byte_end":10863,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10864,"byte_end":10919,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10920,"byte_end":10967,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ [`random`]: crate::random","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10969,"byte_end":10998,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":10999,"byte_end":11054,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11055,"byte_end":11102,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":618},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16945,"byte_end":16954,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":619}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16303,"byte_end":16334,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16335,"byte_end":16338,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16339,"byte_end":16409,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16410,"byte_end":16413,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16414,"byte_end":16427,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16428,"byte_end":16431,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16432,"byte_end":16443,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16444,"byte_end":16499,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16500,"byte_end":16503,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16504,"byte_end":16545,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16546,"byte_end":16592,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16593,"byte_end":16648,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16649,"byte_end":16656,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16657,"byte_end":16660,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16661,"byte_end":16676,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16677,"byte_end":16680,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16681,"byte_end":16751,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16752,"byte_end":16822,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":16823,"byte_end":16839,"line_start":35,"line_end":35,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":626},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18419,"byte_end":18437,"line_start":72,"line_end":72,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":625},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18391,"byte_end":18414,"line_start":71,"line_end":71,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":625},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18370,"byte_end":18384,"line_start":70,"line_end":70,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"pub enum BernoulliError { InvalidProbability, }","parent":null,"children":[{"krate":0,"index":626}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18269,"byte_end":18315,"line_start":68,"line_end":68,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19308,"byte_end":19311,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"pub fn new(f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18789,"byte_end":18863,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18868,"byte_end":18871,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18876,"byte_end":18891,"line_start":89,"line_end":89,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18896,"byte_end":18899,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18904,"byte_end":18976,"line_start":91,"line_end":91,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18981,"byte_end":19054,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19059,"byte_end":19062,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19067,"byte_end":19143,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19148,"byte_end":19214,"line_start":95,"line_end":95,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19219,"byte_end":19282,"line_start":96,"line_end":96,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19287,"byte_end":19296,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":20194,"byte_end":20204,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"pub fn from_ratio(u32, u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19652,"byte_end":19718,"line_start":110,"line_end":110,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19723,"byte_end":19791,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19796,"byte_end":19870,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19875,"byte_end":19878,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19883,"byte_end":19952,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":19957,"byte_end":20030,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":20035,"byte_end":20107,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":20112,"byte_end":20168,"line_start":117,"line_end":117,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":20173,"byte_end":20182,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":54},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24742,"byte_end":24754,"line_start":35,"line_end":35,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::distribution::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":23728,"byte_end":23806,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":23807,"byte_end":23810,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":23811,"byte_end":23876,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":23877,"byte_end":23948,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":23949,"byte_end":24028,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24029,"byte_end":24089,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24090,"byte_end":24093,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24094,"byte_end":24172,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24173,"byte_end":24241,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24242,"byte_end":24315,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24316,"byte_end":24319,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24320,"byte_end":24395,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24396,"byte_end":24454,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24455,"byte_end":24533,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24534,"byte_end":24612,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24613,"byte_end":24680,"line_start":32,"line_end":32,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24681,"byte_end":24684,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24685,"byte_end":24731,"line_start":34,"line_end":34,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24848,"byte_end":24854,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::distribution::Distribution::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> T","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24764,"byte_end":24840,"line_start":36,"line_end":36,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26148,"byte_end":26159,"line_start":73,"line_end":73,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::distribution::Distribution::sample_iter","value":"pub fn sample_iter<R>(Self, R) -> DistIter<Self, R, T> where R: Rng,\nSelf: Sized","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24903,"byte_end":24977,"line_start":39,"line_end":39,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":24982,"byte_end":25011,"line_start":40,"line_end":40,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25016,"byte_end":25019,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25024,"byte_end":25091,"line_start":42,"line_end":42,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25096,"byte_end":25164,"line_start":43,"line_end":43,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25169,"byte_end":25242,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25247,"byte_end":25316,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25321,"byte_end":25388,"line_start":46,"line_end":46,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25393,"byte_end":25396,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25401,"byte_end":25414,"line_start":48,"line_end":48,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25419,"byte_end":25422,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25427,"byte_end":25434,"line_start":50,"line_end":50,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25439,"byte_end":25464,"line_start":51,"line_end":51,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25469,"byte_end":25546,"line_start":52,"line_end":52,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25551,"byte_end":25554,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25559,"byte_end":25590,"line_start":54,"line_end":54,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25595,"byte_end":25598,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25603,"byte_end":25626,"line_start":56,"line_end":56,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25631,"byte_end":25703,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25708,"byte_end":25711,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25716,"byte_end":25730,"line_start":59,"line_end":59,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25735,"byte_end":25767,"line_start":60,"line_end":60,"column_start":5,"column_end":37}},{"value":"/     .sample_iter(&mut rng)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25772,"byte_end":25802,"line_start":61,"line_end":61,"column_start":5,"column_end":35}},{"value":"/     .take(7)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25807,"byte_end":25823,"line_start":62,"line_end":62,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25828,"byte_end":25852,"line_start":63,"line_end":63,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25857,"byte_end":25876,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25881,"byte_end":25884,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25889,"byte_end":25909,"line_start":66,"line_end":66,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25914,"byte_end":25963,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(&mut rng);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":25968,"byte_end":26023,"line_start":68,"line_end":68,"column_start":5,"column_end":60}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26028,"byte_end":26069,"line_start":69,"line_end":69,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26074,"byte_end":26118,"line_start":70,"line_end":70,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26123,"byte_end":26128,"line_start":71,"line_end":71,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26133,"byte_end":26140,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26908,"byte_end":26911,"line_start":102,"line_end":102,"column_start":8,"column_end":11},"name":"map","qualname":"::distributions::distribution::Distribution::map","value":"pub fn map<F, S>(Self, F) -> DistMap<Self, F, T, S> where F: Fn(T) -> S,\nSelf: Sized","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Create a distribution of values of 'S' by mapping the output of `Self`\n through the closure `F`","sig":null,"attributes":[{"value":"/ Create a distribution of values of 'S' by mapping the output of `Self`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26386,"byte_end":26460,"line_start":85,"line_end":85,"column_start":5,"column_end":79}},{"value":"/ through the closure `F`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26465,"byte_end":26492,"line_start":86,"line_end":86,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26497,"byte_end":26500,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26505,"byte_end":26518,"line_start":88,"line_end":88,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26523,"byte_end":26526,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26531,"byte_end":26538,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26543,"byte_end":26568,"line_start":91,"line_end":91,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26573,"byte_end":26626,"line_start":92,"line_end":92,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26631,"byte_end":26634,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26639,"byte_end":26670,"line_start":94,"line_end":94,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26675,"byte_end":26678,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ let die = Uniform::new_inclusive(1, 6);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26683,"byte_end":26726,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"/ let even_number = die.map(|num| num % 2 == 0);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26731,"byte_end":26781,"line_start":97,"line_end":97,"column_start":5,"column_end":55}},{"value":"/ while !even_number.sample(&mut rng) {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26786,"byte_end":26827,"line_start":98,"line_end":98,"column_start":5,"column_end":46}},{"value":"/     println!(\"Still odd; rolling again!\");","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26832,"byte_end":26878,"line_start":99,"line_end":99,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26883,"byte_end":26888,"line_start":100,"line_end":100,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":26893,"byte_end":26900,"line_start":101,"line_end":101,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":639},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27621,"byte_end":27629,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::distribution::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27304,"byte_end":27378,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27379,"byte_end":27421,"line_start":122,"line_end":122,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27422,"byte_end":27425,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27426,"byte_end":27505,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27506,"byte_end":27541,"line_start":125,"line_end":125,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27542,"byte_end":27545,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27546,"byte_end":27592,"line_start":127,"line_end":127,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":651},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28784,"byte_end":28791,"line_start":176,"line_end":176,"column_start":12,"column_end":19},"name":"DistMap","qualname":"::distributions::distribution::DistMap","value":"DistMap {  }","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658}],"decl_id":null,"docs":" A distribution of values of type `S` derived from the distribution `D`\n by mapping its output of type `T` through the closure `F`.","sig":null,"attributes":[{"value":"/ A distribution of values of type `S` derived from the distribution `D`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28512,"byte_end":28586,"line_start":170,"line_end":170,"column_start":1,"column_end":75}},{"value":"/ by mapping its output of type `T` through the closure `F`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28587,"byte_end":28649,"line_start":171,"line_end":171,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28650,"byte_end":28653,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`Distribution::map`] method.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28654,"byte_end":28719,"line_start":173,"line_end":173,"column_start":1,"column_end":66}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28720,"byte_end":28755,"line_start":174,"line_end":174,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":665},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33244,"byte_end":33256,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32227,"byte_end":32305,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32306,"byte_end":32356,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32357,"byte_end":32360,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32361,"byte_end":32435,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32436,"byte_end":32513,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32514,"byte_end":32587,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32588,"byte_end":32614,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32615,"byte_end":32618,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32619,"byte_end":32685,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32686,"byte_end":32762,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32763,"byte_end":32774,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32775,"byte_end":32778,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32779,"byte_end":32792,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32793,"byte_end":32800,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32801,"byte_end":32833,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32834,"byte_end":32876,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32877,"byte_end":32880,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32881,"byte_end":32934,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32935,"byte_end":32976,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32977,"byte_end":32984,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32985,"byte_end":32988,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":32989,"byte_end":33037,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33038,"byte_end":33082,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33083,"byte_end":33138,"line_start":43,"line_end":43,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":672},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34251,"byte_end":34257,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33259,"byte_end":33332,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33333,"byte_end":33391,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33392,"byte_end":33395,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33396,"byte_end":33475,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33476,"byte_end":33555,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33556,"byte_end":33615,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33616,"byte_end":33619,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33620,"byte_end":33692,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33693,"byte_end":33769,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33770,"byte_end":33781,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33782,"byte_end":33785,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33786,"byte_end":33799,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33800,"byte_end":33807,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33808,"byte_end":33840,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33841,"byte_end":33877,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33878,"byte_end":33881,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33882,"byte_end":33929,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33930,"byte_end":33971,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33972,"byte_end":33979,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33980,"byte_end":33983,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":33984,"byte_end":34032,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34033,"byte_end":34089,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34090,"byte_end":34145,"line_start":70,"line_end":70,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":104},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34367,"byte_end":34376,"line_start":78,"line_end":78,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":105},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34388,"byte_end":34389,"line_start":79,"line_end":79,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34791,"byte_end":34815,"line_start":89,"line_end":89,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"pub fn into_float_with_exponent(Self, i32) -> Self::F","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34396,"byte_end":34467,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34472,"byte_end":34482,"line_start":82,"line_end":82,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34487,"byte_end":34490,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34495,"byte_end":34569,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34574,"byte_end":34591,"line_start":85,"line_end":85,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34596,"byte_end":34670,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34675,"byte_end":34726,"line_start":87,"line_end":87,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/float.rs","byte_start":34731,"byte_end":34783,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":745},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55519,"byte_end":55531,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `u8`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `u8`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54054,"byte_end":54126,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54127,"byte_end":54148,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54149,"byte_end":54152,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54153,"byte_end":54166,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54167,"byte_end":54170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54171,"byte_end":54178,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54179,"byte_end":54197,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54198,"byte_end":54230,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54231,"byte_end":54273,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54274,"byte_end":54277,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54278,"byte_end":54309,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54310,"byte_end":54350,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54351,"byte_end":54398,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/         .map(char::from)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54399,"byte_end":54427,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/         .take(7)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54428,"byte_end":54448,"line_start":43,"line_end":43,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54449,"byte_end":54472,"line_start":44,"line_end":44,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54473,"byte_end":54513,"line_start":45,"line_end":45,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54514,"byte_end":54521,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54522,"byte_end":54525,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Passwords","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54526,"byte_end":54541,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54542,"byte_end":54545,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Users sometimes ask whether it is safe to use a string of random characters","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54546,"byte_end":54625,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ as a password. In principle, all RNGs in Rand implementing `CryptoRng` are","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54626,"byte_end":54704,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ suitable as a source of randomness for generating passwords (if they are","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54705,"byte_end":54781,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ properly seeded), but it is more conservative to only use randomness","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54782,"byte_end":54854,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ directly from the operating system via the `getrandom` crate, or the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54855,"byte_end":54927,"line_start":54,"line_end":54,"column_start":1,"column_end":73}},{"value":"/ corresponding bindings of a crypto library.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54928,"byte_end":54975,"line_start":55,"line_end":55,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54976,"byte_end":54979,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ When generating passwords or keys, it is important to consider the threat","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":54980,"byte_end":55057,"line_start":57,"line_end":57,"column_start":1,"column_end":78}},{"value":"/ model and in some cases the memorability of the password. This is out of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55058,"byte_end":55134,"line_start":58,"line_end":58,"column_start":1,"column_end":77}},{"value":"/ scope of the Rand project, and therefore we defer to the following","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55135,"byte_end":55205,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/ references:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55206,"byte_end":55221,"line_start":60,"line_end":60,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55222,"byte_end":55225,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ - [Wikipedia article on Password Strength](https://en.wikipedia.org/wiki/Password_strength)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55226,"byte_end":55321,"line_start":62,"line_end":62,"column_start":1,"column_end":96}},{"value":"/ - [Diceware for generating memorable passwords](https://en.wikipedia.org/wiki/Diceware)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55322,"byte_end":55413,"line_start":63,"line_end":63,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1064},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67146,"byte_end":67151,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"Slice","qualname":"::distributions::slice::Slice","value":"Slice {  }","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068}],"decl_id":null,"docs":" A distribution to sample items uniformly from a slice.","sig":null,"attributes":[{"value":"/ A distribution to sample items uniformly from a slice.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65181,"byte_end":65239,"line_start":11,"line_end":11,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65240,"byte_end":65243,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`Slice::new`] constructs a distribution referencing a slice and uniformly","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65244,"byte_end":65322,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ samples references from the items in the slice. It may do extra work up","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65323,"byte_end":65398,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ front to make sampling of multiple values faster; if only one sample from","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65399,"byte_end":65476,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ the slice is required, [`SliceRandom::choose`] can be more efficient.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65477,"byte_end":65550,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65551,"byte_end":65554,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65555,"byte_end":65620,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `slice[rng.gen() % slice.len()]` samples from","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65621,"byte_end":65699,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ the slice, but may be more likely to select numbers in the low range than","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65700,"byte_end":65777,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ other values.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65778,"byte_end":65795,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65796,"byte_end":65799,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This distribution samples with replacement; each sample is independent.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65800,"byte_end":65875,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ Sampling without replacement requires state to be retained, and therefore","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65876,"byte_end":65953,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ cannot be handled by a distribution; you should instead consider methods","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":65954,"byte_end":66030,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/ on [`SliceRandom`], such as [`SliceRandom::choose_multiple`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66031,"byte_end":66096,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66097,"byte_end":66100,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66101,"byte_end":66114,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66115,"byte_end":66118,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66119,"byte_end":66126,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66127,"byte_end":66145,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::Slice;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66146,"byte_end":66181,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66182,"byte_end":66185,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let vowels = ['a', 'e', 'i', 'o', 'u'];","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66186,"byte_end":66229,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/ let vowels_dist = Slice::new(&vowels).unwrap();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66230,"byte_end":66281,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/ let rng = rand::thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66282,"byte_end":66315,"line_start":36,"line_end":36,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66316,"byte_end":66319,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ // build a string of 10 vowels","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66320,"byte_end":66354,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ let vowel_string: String = rng","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66355,"byte_end":66389,"line_start":39,"line_end":39,"column_start":1,"column_end":35}},{"value":"/     .sample_iter(&vowels_dist)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66390,"byte_end":66424,"line_start":40,"line_end":40,"column_start":1,"column_end":35}},{"value":"/     .take(10)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66425,"byte_end":66442,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/     .collect();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66443,"byte_end":66462,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66463,"byte_end":66466,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", vowel_string);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66467,"byte_end":66500,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(vowel_string.len(), 10);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66501,"byte_end":66540,"line_start":45,"line_end":45,"column_start":1,"column_end":40}},{"value":"/ assert!(vowel_string.chars().all(|c| vowels.contains(&c)));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66541,"byte_end":66604,"line_start":46,"line_end":46,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66605,"byte_end":66612,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66613,"byte_end":66616,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`SliceRandom::choose`][crate::seq::SliceRandom::choose]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66617,"byte_end":66698,"line_start":49,"line_end":49,"column_start":1,"column_end":82}},{"value":"/ may be preferred:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66699,"byte_end":66720,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66721,"byte_end":66724,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66725,"byte_end":66732,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66733,"byte_end":66764,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66765,"byte_end":66768,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let vowels = ['a', 'e', 'i', 'o', 'u'];","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66769,"byte_end":66812,"line_start":55,"line_end":55,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66813,"byte_end":66850,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66851,"byte_end":66854,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", vowels.choose(&mut rng).unwrap())","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66855,"byte_end":66907,"line_start":58,"line_end":58,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66908,"byte_end":66915,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66916,"byte_end":66919,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [`SliceRandom`]: crate::seq::SliceRandom","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66920,"byte_end":66964,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/ [`SliceRandom::choose`]: crate::seq::SliceRandom::choose","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":66965,"byte_end":67025,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/ [`SliceRandom::choose_multiple`]: crate::seq::SliceRandom::choose_multiple","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67026,"byte_end":67104,"line_start":63,"line_end":63,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67372,"byte_end":67375,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<Slice>::new","value":"pub fn new(&'a [T]) -> Result<Self, EmptySlice>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Slice` instance which samples uniformly from the slice.\n Returns `Err` if the slice is empty.\n","sig":null,"attributes":[{"value":"/ Create a new `Slice` instance which samples uniformly from the slice.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67242,"byte_end":67315,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ Returns `Err` if the slice is empty.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67320,"byte_end":67360,"line_start":72,"line_end":72,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":68334,"byte_end":68344,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"EmptySlice","qualname":"::distributions::slice::EmptySlice","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type indicating that a [`Slice`] distribution was improperly\n constructed with an empty slice.\n","sig":null,"attributes":[{"value":"/ Error type indicating that a [`Slice`] distribution was improperly","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":68185,"byte_end":68255,"line_start":102,"line_end":102,"column_start":1,"column_end":71}},{"value":"/ constructed with an empty slice.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":68256,"byte_end":68292,"line_start":103,"line_end":103,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":225},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/utils.rs","byte_start":69149,"byte_end":69155,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":234},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/utils.rs","byte_start":76149,"byte_end":76153,"line_start":220,"line_end":220,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":239},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/utils.rs","byte_start":76668,"byte_end":76672,"line_start":232,"line_end":232,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":259},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11264,"byte_end":11277,"line_start":107,"line_end":107,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":260}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":263},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":1138},{"krate":0,"index":1142},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":303},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":351},{"krate":0,"index":356},{"krate":0,"index":361},{"krate":0,"index":1150},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":366},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1183},{"krate":0,"index":1185},{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1343},{"krate":0,"index":1345},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":367},{"krate":0,"index":1403},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":1410},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1419},{"krate":0,"index":382},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1454},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":383},{"krate":0,"index":385}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"/ A distribution uniformly sampling numbers within a given range.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":82750,"byte_end":82817,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":82818,"byte_end":82821,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":82822,"byte_end":82900,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":82901,"byte_end":82980,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":82981,"byte_end":83048,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ [`Uniform`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83049,"byte_end":83065,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83066,"byte_end":83069,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This distribution is provided with support for several primitive types","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83070,"byte_end":83144,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83145,"byte_end":83223,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83224,"byte_end":83303,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ implementation.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83304,"byte_end":83323,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83324,"byte_end":83327,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83328,"byte_end":83406,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83407,"byte_end":83482,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83483,"byte_end":83562,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ need to be used directly (unless implementing a derived back-end).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83563,"byte_end":83633,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83634,"byte_end":83637,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83638,"byte_end":83657,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83658,"byte_end":83661,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83662,"byte_end":83669,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83670,"byte_end":83702,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83703,"byte_end":83740,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83741,"byte_end":83744,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83745,"byte_end":83776,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83777,"byte_end":83818,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83819,"byte_end":83822,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // sample between 1 and 10 points","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83823,"byte_end":83860,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..rng.gen_range(1..=10) {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83861,"byte_end":83900,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83901,"byte_end":83980,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":83981,"byte_end":84039,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84040,"byte_end":84080,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84081,"byte_end":84086,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84087,"byte_end":84094,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84095,"byte_end":84098,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Extending `Uniform` to support a custom type","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84099,"byte_end":84149,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84150,"byte_end":84153,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84154,"byte_end":84229,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84230,"byte_end":84311,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84312,"byte_end":84388,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84389,"byte_end":84392,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84393,"byte_end":84473,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84474,"byte_end":84552,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84553,"byte_end":84629,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ `low < high`). The example below merely wraps another back-end.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84630,"byte_end":84697,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84698,"byte_end":84701,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84702,"byte_end":84779,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84780,"byte_end":84858,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ by value. In the implementation of these functions, you can choose to","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84859,"byte_end":84932,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":84933,"byte_end":85017,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85018,"byte_end":85088,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85089,"byte_end":85092,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85093,"byte_end":85100,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85101,"byte_end":85126,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85127,"byte_end":85189,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85190,"byte_end":85246,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85247,"byte_end":85250,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ struct MyF32(f32);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85251,"byte_end":85273,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85274,"byte_end":85277,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, Debug)]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85278,"byte_end":85311,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85312,"byte_end":85355,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85356,"byte_end":85359,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ impl UniformSampler for UniformMyF32 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85360,"byte_end":85402,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/     type X = MyF32;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85403,"byte_end":85426,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85427,"byte_end":85476,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85477,"byte_end":85529,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85530,"byte_end":85581,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85582,"byte_end":85591,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85592,"byte_end":85675,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85676,"byte_end":85685,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85686,"byte_end":85745,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85746,"byte_end":85798,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85799,"byte_end":85850,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85851,"byte_end":85860,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/         UniformSampler::new(low, high)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85861,"byte_end":85903,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85904,"byte_end":85913,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85914,"byte_end":85981,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/         MyF32(self.0.sample(rng))","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":85982,"byte_end":86019,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86020,"byte_end":86029,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86030,"byte_end":86035,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86036,"byte_end":86039,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ impl SampleUniform for MyF32 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86040,"byte_end":86074,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/     type Sampler = UniformMyF32;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86075,"byte_end":86111,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86112,"byte_end":86117,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86118,"byte_end":86121,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86122,"byte_end":86177,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ let uniform = Uniform::new(low, high);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86178,"byte_end":86220,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/ let x = uniform.sample(&mut thread_rng());","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86221,"byte_end":86267,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86268,"byte_end":86275,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86276,"byte_end":86279,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86280,"byte_end":86347,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/ [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86348,"byte_end":86417,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/ [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86418,"byte_end":86479,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/ [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86480,"byte_end":86545,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86546,"byte_end":86617,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/ [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":86618,"byte_end":86699,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1138},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89299,"byte_end":89306,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87317,"byte_end":87364,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87365,"byte_end":87368,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87369,"byte_end":87440,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87441,"byte_end":87517,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster. If only one sample","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87518,"byte_end":87598,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ from the range is required, [`Rng::gen_range`] can be more efficient.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87599,"byte_end":87672,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87673,"byte_end":87676,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87677,"byte_end":87749,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87750,"byte_end":87828,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87829,"byte_end":87907,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87908,"byte_end":87940,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87941,"byte_end":87944,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":87945,"byte_end":88010,"line_start":136,"line_end":136,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88011,"byte_end":88090,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88091,"byte_end":88170,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88171,"byte_end":88250,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88251,"byte_end":88328,"line_start":140,"line_end":140,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88329,"byte_end":88373,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88374,"byte_end":88377,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88378,"byte_end":88436,"line_start":143,"line_end":143,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular, care must","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88437,"byte_end":88516,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88517,"byte_end":88596,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88597,"byte_end":88600,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88601,"byte_end":88614,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88615,"byte_end":88618,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88619,"byte_end":88626,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88627,"byte_end":88680,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88681,"byte_end":88684,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ let between = Uniform::from(10..10000);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88685,"byte_end":88728,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88729,"byte_end":88766,"line_start":153,"line_end":153,"column_start":1,"column_end":38}},{"value":"/ let mut sum = 0;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88767,"byte_end":88787,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/ for _ in 0..1000 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88788,"byte_end":88810,"line_start":155,"line_end":155,"column_start":1,"column_end":23}},{"value":"/     sum += between.sample(&mut rng);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88811,"byte_end":88851,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88852,"byte_end":88857,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88858,"byte_end":88882,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88883,"byte_end":88890,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88891,"byte_end":88894,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`Rng::gen_range`] may be prefered:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88895,"byte_end":88955,"line_start":161,"line_end":161,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88956,"byte_end":88959,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88960,"byte_end":88967,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88968,"byte_end":88986,"line_start":164,"line_end":164,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88987,"byte_end":88990,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":88991,"byte_end":89028,"line_start":166,"line_end":166,"column_start":1,"column_end":38}},{"value":"/ println!(\"{}\", rng.gen_range(0..10));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89029,"byte_end":89070,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89071,"byte_end":89078,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89079,"byte_end":89082,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89083,"byte_end":89108,"line_start":170,"line_end":170,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89109,"byte_end":89154,"line_start":171,"line_end":171,"column_start":1,"column_end":46}},{"value":"/ [`Rng::gen_range`]: Rng::gen_range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89155,"byte_end":89193,"line_start":172,"line_end":172,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89542,"byte_end":89545,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"pub fn new<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> + Sized,\nB2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89379,"byte_end":89452,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89457,"byte_end":89530,"line_start":179,"line_end":179,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89884,"byte_end":89897,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> +\nSized, B2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89732,"byte_end":89807,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89812,"byte_end":89872,"line_start":189,"line_end":189,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":315},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90543,"byte_end":90556,"line_start":212,"line_end":212,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":316}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90242,"byte_end":90315,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90316,"byte_end":90361,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90362,"byte_end":90365,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90366,"byte_end":90438,"line_start":208,"line_end":208,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90439,"byte_end":90470,"line_start":209,"line_end":209,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90471,"byte_end":90474,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90475,"byte_end":90532,"line_start":211,"line_end":211,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":316},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90640,"byte_end":90647,"line_start":214,"line_end":214,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":315},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90570,"byte_end":90630,"line_start":213,"line_end":213,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":317},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91122,"byte_end":91136,"line_start":227,"line_end":227,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":331}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90678,"byte_end":90728,"line_start":217,"line_end":217,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90729,"byte_end":90732,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90733,"byte_end":90805,"line_start":219,"line_end":219,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90806,"byte_end":90837,"line_start":220,"line_end":220,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90838,"byte_end":90841,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90842,"byte_end":90918,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90919,"byte_end":90996,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90997,"byte_end":91000,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91001,"byte_end":91058,"line_start":225,"line_end":225,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91059,"byte_end":91111,"line_start":226,"line_end":226,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":318},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91204,"byte_end":91205,"line_start":229,"line_end":229,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91150,"byte_end":91194,"line_start":228,"line_end":228,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91468,"byte_end":91471,"line_start":236,"line_end":236,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"pub fn new<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91212,"byte_end":91284,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91289,"byte_end":91307,"line_start":232,"line_end":232,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91312,"byte_end":91315,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91320,"byte_end":91383,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91388,"byte_end":91460,"line_start":235,"line_end":235,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91844,"byte_end":91857,"line_start":246,"line_end":246,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> +\nSized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91608,"byte_end":91664,"line_start":241,"line_end":241,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91669,"byte_end":91672,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91677,"byte_end":91740,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91745,"byte_end":91814,"line_start":244,"line_end":244,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91819,"byte_end":91836,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92021,"byte_end":92027,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> Self::X","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91994,"byte_end":92013,"line_start":251,"line_end":251,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93002,"byte_end":93015,"line_start":273,"line_end":273,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"pub fn sample_single<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R) -> Self::X where\nB1: SampleBorrow<Self::X> + Sized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92082,"byte_end":92157,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92162,"byte_end":92206,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92211,"byte_end":92214,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92219,"byte_end":92259,"line_start":257,"line_end":257,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92264,"byte_end":92337,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92342,"byte_end":92416,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92421,"byte_end":92476,"line_start":260,"line_end":260,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92481,"byte_end":92514,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92519,"byte_end":92522,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92527,"byte_end":92602,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92607,"byte_end":92661,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92666,"byte_end":92673,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92678,"byte_end":92762,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92767,"byte_end":92789,"line_start":267,"line_end":267,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92794,"byte_end":92857,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92862,"byte_end":92897,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92902,"byte_end":92972,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92977,"byte_end":92982,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":92987,"byte_end":92994,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93691,"byte_end":93714,"line_start":290,"line_end":290,"column_start":8,"column_end":31},"name":"sample_single_inclusive","qualname":"::distributions::uniform::UniformSampler::sample_single_inclusive","value":"pub fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R)\n-> Self::X where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and inclusive upper bound `[low, high]`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93285,"byte_end":93360,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ and inclusive upper bound `[low, high]`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93365,"byte_end":93409,"line_start":283,"line_end":283,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93414,"byte_end":93417,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93422,"byte_end":93462,"line_start":285,"line_end":285,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93467,"byte_end":93539,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ some types more optimal implementations for single usage may be provided","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93544,"byte_end":93620,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/ via this method.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93625,"byte_end":93645,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/ Results may not be identical.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":93650,"byte_end":93683,"line_start":289,"line_end":289,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":341},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94550,"byte_end":94562,"line_start":318,"line_end":318,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94344,"byte_end":94398,"line_start":313,"line_end":313,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94399,"byte_end":94460,"line_start":314,"line_end":314,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94461,"byte_end":94499,"line_start":315,"line_end":315,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94500,"byte_end":94503,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94504,"byte_end":94539,"line_start":317,"line_end":317,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94716,"byte_end":94722,"line_start":322,"line_end":322,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"pub fn borrow(&Self) -> &Borrowed","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94579,"byte_end":94644,"line_start":319,"line_end":319,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94649,"byte_end":94652,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94657,"byte_end":94708,"line_start":321,"line_end":321,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":351},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95262,"byte_end":95273,"line_start":345,"line_end":345,"column_start":11,"column_end":22},"name":"SampleRange","qualname":"::distributions::uniform::SampleRange","value":"SampleRange<T>","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":355}],"decl_id":null,"docs":" Range that supports generating a single sample efficiently.","sig":null,"attributes":[{"value":"/ Range that supports generating a single sample efficiently.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95080,"byte_end":95143,"line_start":341,"line_end":341,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95144,"byte_end":95147,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ Any type implementing this trait can be used to specify the sampled range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95148,"byte_end":95225,"line_start":343,"line_end":343,"column_start":1,"column_end":78}},{"value":"/ for `Rng::gen_range`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95226,"byte_end":95251,"line_start":344,"line_end":344,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95334,"byte_end":95347,"line_start":347,"line_end":347,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::SampleRange::sample_single","value":"pub fn sample_single<R: RngCore + ?Sized>(Self, &mut R) -> T","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Generate a sample from the given range.\n","sig":null,"attributes":[{"value":"/ Generate a sample from the given range.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95283,"byte_end":95326,"line_start":346,"line_end":346,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95444,"byte_end":95452,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::distributions::uniform::SampleRange::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Check whether the range is empty.\n","sig":null,"attributes":[{"value":"/ Check whether the range is empty.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95399,"byte_end":95436,"line_start":349,"line_end":349,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1150},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":98239,"byte_end":98249,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96230,"byte_end":96297,"line_start":383,"line_end":383,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96298,"byte_end":96301,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96302,"byte_end":96381,"line_start":385,"line_end":385,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96382,"byte_end":96439,"line_start":386,"line_end":386,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96440,"byte_end":96443,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96444,"byte_end":96470,"line_start":388,"line_end":388,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96471,"byte_end":96474,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96475,"byte_end":96549,"line_start":390,"line_end":390,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96550,"byte_end":96630,"line_start":391,"line_end":391,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96631,"byte_end":96711,"line_start":392,"line_end":392,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96712,"byte_end":96715,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96716,"byte_end":96792,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96793,"byte_end":96871,"line_start":395,"line_end":395,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96872,"byte_end":96948,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":96949,"byte_end":97002,"line_start":397,"line_end":397,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97003,"byte_end":97006,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97007,"byte_end":97083,"line_start":399,"line_end":399,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97084,"byte_end":97147,"line_start":400,"line_end":400,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97148,"byte_end":97151,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97152,"byte_end":97226,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97227,"byte_end":97307,"line_start":403,"line_end":403,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97308,"byte_end":97394,"line_start":404,"line_end":404,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97395,"byte_end":97472,"line_start":405,"line_end":405,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97473,"byte_end":97544,"line_start":406,"line_end":406,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97545,"byte_end":97548,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97549,"byte_end":97627,"line_start":408,"line_end":408,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97628,"byte_end":97705,"line_start":409,"line_end":409,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97706,"byte_end":97785,"line_start":410,"line_end":410,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97786,"byte_end":97860,"line_start":411,"line_end":411,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97861,"byte_end":97908,"line_start":412,"line_end":412,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97909,"byte_end":97912,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97913,"byte_end":97989,"line_start":414,"line_end":414,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":97990,"byte_end":98069,"line_start":415,"line_end":415,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":98070,"byte_end":98133,"line_start":416,"line_end":416,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1403},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110505,"byte_end":110516,"line_start":730,"line_end":730,"column_start":12,"column_end":23},"name":"UniformChar","qualname":"::distributions::uniform::UniformChar","value":"UniformChar {  }","parent":null,"children":[{"krate":0,"index":1404}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `char`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `char`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":109947,"byte_end":110007,"line_start":719,"line_end":719,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110008,"byte_end":110011,"line_start":720,"line_end":720,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110012,"byte_end":110091,"line_start":721,"line_end":721,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110092,"byte_end":110149,"line_start":722,"line_end":722,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110150,"byte_end":110153,"line_start":723,"line_end":723,"column_start":1,"column_end":4}},{"value":"/ This differs from integer range sampling since the range `0xD800..=0xDFFF`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110154,"byte_end":110232,"line_start":724,"line_end":724,"column_start":1,"column_end":79}},{"value":"/ are used for surrogate pairs in UCS and UTF-16, and consequently are not","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110233,"byte_end":110309,"line_start":725,"line_end":725,"column_start":1,"column_end":77}},{"value":"/ valid Unicode code points. We must therefore avoid sampling values in this","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110310,"byte_end":110388,"line_start":726,"line_end":726,"column_start":1,"column_end":79}},{"value":"/ range.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110389,"byte_end":110399,"line_start":727,"line_end":727,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1410},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":113388,"byte_end":113400,"line_start":809,"line_end":809,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1412},{"krate":0,"index":1413}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112398,"byte_end":112472,"line_start":788,"line_end":788,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112473,"byte_end":112476,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112477,"byte_end":112556,"line_start":790,"line_end":790,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112557,"byte_end":112614,"line_start":791,"line_end":791,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112615,"byte_end":112618,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112619,"byte_end":112645,"line_start":793,"line_end":793,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112646,"byte_end":112649,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112650,"byte_end":112729,"line_start":795,"line_end":795,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112730,"byte_end":112807,"line_start":796,"line_end":796,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112808,"byte_end":112854,"line_start":797,"line_end":797,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112855,"byte_end":112858,"line_start":798,"line_end":798,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112859,"byte_end":112937,"line_start":799,"line_end":799,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":112938,"byte_end":113010,"line_start":800,"line_end":800,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":113011,"byte_end":113090,"line_start":801,"line_end":801,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":113091,"byte_end":113143,"line_start":802,"line_end":802,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":113144,"byte_end":113147,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":113148,"byte_end":113180,"line_start":804,"line_end":804,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":113181,"byte_end":113233,"line_start":805,"line_end":805,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":113234,"byte_end":113282,"line_start":806,"line_end":806,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1454},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122410,"byte_end":122425,"line_start":1022,"line_end":1022,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1455},{"krate":0,"index":1456}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122097,"byte_end":122161,"line_start":1016,"line_end":1016,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122162,"byte_end":122165,"line_start":1017,"line_end":1017,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122166,"byte_end":122246,"line_start":1018,"line_end":1018,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122247,"byte_end":122304,"line_start":1019,"line_end":1019,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15760,"byte_end":15768,"line_start":218,"line_end":218,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12029,"byte_end":12107,"line_start":134,"line_end":134,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12108,"byte_end":12188,"line_start":135,"line_end":135,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12189,"byte_end":12223,"line_start":136,"line_end":136,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12224,"byte_end":12227,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12228,"byte_end":12259,"line_start":138,"line_end":138,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12260,"byte_end":12263,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12264,"byte_end":12334,"line_start":140,"line_end":140,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12335,"byte_end":12399,"line_start":141,"line_end":141,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12400,"byte_end":12403,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12404,"byte_end":12480,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12481,"byte_end":12515,"line_start":144,"line_end":144,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12516,"byte_end":12592,"line_start":145,"line_end":145,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12593,"byte_end":12661,"line_start":146,"line_end":146,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12662,"byte_end":12728,"line_start":147,"line_end":147,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12729,"byte_end":12767,"line_start":148,"line_end":148,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12768,"byte_end":12837,"line_start":149,"line_end":149,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12838,"byte_end":12912,"line_start":150,"line_end":150,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12913,"byte_end":12961,"line_start":151,"line_end":151,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":12962,"byte_end":13038,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13039,"byte_end":13069,"line_start":153,"line_end":153,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13070,"byte_end":13073,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13074,"byte_end":13147,"line_start":155,"line_end":155,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13148,"byte_end":13207,"line_start":156,"line_end":156,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13208,"byte_end":13211,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13212,"byte_end":13287,"line_start":158,"line_end":158,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13288,"byte_end":13363,"line_start":159,"line_end":159,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13364,"byte_end":13444,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13445,"byte_end":13510,"line_start":161,"line_end":161,"column_start":1,"column_end":66}},{"value":"/     When using `rustc` ≥ 1.51, enable the `min_const_gen` feature to support","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13511,"byte_end":13593,"line_start":162,"line_end":162,"column_start":1,"column_end":81}},{"value":"/     arrays larger than 32 elements.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13594,"byte_end":13633,"line_start":163,"line_end":163,"column_start":1,"column_end":40}},{"value":"/     Note that [`Rng::fill`] and `Standard`'s array support are *not* equivalent:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13634,"byte_end":13718,"line_start":164,"line_end":164,"column_start":1,"column_end":85}},{"value":"/     the former is optimised for integer types (using fewer RNG calls for","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13719,"byte_end":13795,"line_start":165,"line_end":165,"column_start":1,"column_end":77}},{"value":"/     element types smaller than the RNG word size), while the latter supports","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13796,"byte_end":13876,"line_start":166,"line_end":166,"column_start":1,"column_end":81}},{"value":"/     any element type supported by `Standard`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13877,"byte_end":13926,"line_start":167,"line_end":167,"column_start":1,"column_end":50}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":13927,"byte_end":14006,"line_start":168,"line_end":168,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14007,"byte_end":14074,"line_start":169,"line_end":169,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14075,"byte_end":14078,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14079,"byte_end":14108,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14109,"byte_end":14112,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14113,"byte_end":14192,"line_start":173,"line_end":173,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14193,"byte_end":14196,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14197,"byte_end":14204,"line_start":175,"line_end":175,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14205,"byte_end":14231,"line_start":176,"line_end":176,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14232,"byte_end":14250,"line_start":177,"line_end":177,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14251,"byte_end":14305,"line_start":178,"line_end":178,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14306,"byte_end":14309,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14310,"byte_end":14328,"line_start":180,"line_end":180,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14329,"byte_end":14344,"line_start":181,"line_end":181,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14345,"byte_end":14350,"line_start":182,"line_end":182,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14351,"byte_end":14354,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14355,"byte_end":14398,"line_start":184,"line_end":184,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14399,"byte_end":14464,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14465,"byte_end":14499,"line_start":186,"line_end":186,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14500,"byte_end":14509,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14510,"byte_end":14515,"line_start":188,"line_end":188,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14516,"byte_end":14523,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14524,"byte_end":14527,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14528,"byte_end":14548,"line_start":191,"line_end":191,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14549,"byte_end":14556,"line_start":192,"line_end":192,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14557,"byte_end":14582,"line_start":193,"line_end":193,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14583,"byte_end":14621,"line_start":194,"line_end":194,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14622,"byte_end":14625,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14626,"byte_end":14685,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14686,"byte_end":14727,"line_start":197,"line_end":197,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14728,"byte_end":14735,"line_start":198,"line_end":198,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14736,"byte_end":14739,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14740,"byte_end":14775,"line_start":200,"line_end":200,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14776,"byte_end":14856,"line_start":201,"line_end":201,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14857,"byte_end":14921,"line_start":202,"line_end":202,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14922,"byte_end":14925,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":14926,"byte_end":15000,"line_start":204,"line_end":204,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15001,"byte_end":15078,"line_start":205,"line_end":205,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15079,"byte_end":15152,"line_start":206,"line_end":206,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15153,"byte_end":15223,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15224,"byte_end":15227,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15228,"byte_end":15304,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0..1)` which also samples from","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15305,"byte_end":15381,"line_start":210,"line_end":210,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` uses transmute-based methods which yield 1 bit","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15382,"byte_end":15461,"line_start":211,"line_end":211,"column_start":1,"column_end":80}},{"value":"/ less precision but may perform faster on some architectures (on modern Intel","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15462,"byte_end":15542,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"/ CPUs all methods have approximately equal performance).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15543,"byte_end":15602,"line_start":213,"line_end":213,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15603,"byte_end":15606,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":15607,"byte_end":15640,"line_start":215,"line_end":215,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":432},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"/ Convenience re-export of common members","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145468,"byte_end":145511,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145512,"byte_end":145515,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145516,"byte_end":145592,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145593,"byte_end":145672,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be imported manually:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145673,"byte_end":145698,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145699,"byte_end":145702,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145703,"byte_end":145710,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145711,"byte_end":145736,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145737,"byte_end":145795,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ # let _: f32 = r.gen();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145796,"byte_end":145823,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/prelude.rs","byte_start":145824,"byte_end":145831,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":494},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148561,"byte_end":148564,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147030,"byte_end":147114,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147115,"byte_end":147185,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147186,"byte_end":147189,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147190,"byte_end":147257,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147258,"byte_end":147261,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147262,"byte_end":147281,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147282,"byte_end":147285,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147286,"byte_end":147355,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147356,"byte_end":147389,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147390,"byte_end":147393,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147394,"byte_end":147470,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147471,"byte_end":147528,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147529,"byte_end":147603,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut dyn RngCore`. Without","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147604,"byte_end":147684,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147685,"byte_end":147741,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147742,"byte_end":147745,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147746,"byte_end":147825,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147826,"byte_end":147905,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147906,"byte_end":147985,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":147986,"byte_end":148064,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148065,"byte_end":148141,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148142,"byte_end":148216,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148217,"byte_end":148293,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148294,"byte_end":148346,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148347,"byte_end":148350,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148351,"byte_end":148363,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148364,"byte_end":148367,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148368,"byte_end":148375,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148376,"byte_end":148403,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148404,"byte_end":148422,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148423,"byte_end":148426,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148427,"byte_end":148476,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148477,"byte_end":148494,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148495,"byte_end":148500,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148501,"byte_end":148504,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148505,"byte_end":148542,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148543,"byte_end":148550,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149837,"byte_end":149840,"line_start":93,"line_end":93,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"pub fn gen<T>(&mut Self) -> T where Standard: Distribution<T>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148580,"byte_end":148647,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148652,"byte_end":148655,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148660,"byte_end":148673,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148678,"byte_end":148681,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148686,"byte_end":148693,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148698,"byte_end":148730,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148735,"byte_end":148738,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148743,"byte_end":148774,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148779,"byte_end":148806,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148811,"byte_end":148833,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148838,"byte_end":148885,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148890,"byte_end":148897,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148902,"byte_end":148905,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148910,"byte_end":148933,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148938,"byte_end":148941,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148946,"byte_end":149019,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149024,"byte_end":149095,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149100,"byte_end":149114,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/ When using `rustc` ≥ 1.51, enable the `min_const_gen` feature to support","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149119,"byte_end":149197,"line_start":74,"line_end":74,"column_start":5,"column_end":81}},{"value":"/ arrays larger than 32 elements.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149202,"byte_end":149237,"line_start":75,"line_end":75,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149242,"byte_end":149245,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149250,"byte_end":149323,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149328,"byte_end":149398,"line_start":78,"line_end":78,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149403,"byte_end":149406,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149411,"byte_end":149418,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149423,"byte_end":149455,"line_start":81,"line_end":81,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149460,"byte_end":149463,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149468,"byte_end":149499,"line_start":83,"line_end":83,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149504,"byte_end":149574,"line_start":84,"line_end":84,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149579,"byte_end":149582,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149587,"byte_end":149652,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149657,"byte_end":149687,"line_start":87,"line_end":87,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149692,"byte_end":149749,"line_start":88,"line_end":88,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149754,"byte_end":149761,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149766,"byte_end":149769,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149774,"byte_end":149815,"line_start":91,"line_end":91,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149820,"byte_end":149829,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150875,"byte_end":150884,"line_start":129,"line_end":129,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"pub fn gen_range<T, R>(&mut Self, R) -> T where T: SampleUniform,\nR: SampleRange<T>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Generate a random value in the given range.","sig":null,"attributes":[{"value":"/ Generate a random value in the given range.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149939,"byte_end":149986,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149991,"byte_end":149994,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":149999,"byte_end":150071,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150076,"byte_end":150144,"line_start":101,"line_end":101,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150149,"byte_end":150221,"line_start":102,"line_end":102,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150226,"byte_end":150229,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Only `gen_range(low..high)` and `gen_range(low..=high)` are supported.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150234,"byte_end":150308,"line_start":104,"line_end":104,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150313,"byte_end":150316,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150321,"byte_end":150333,"line_start":106,"line_end":106,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150338,"byte_end":150341,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is empty.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150346,"byte_end":150379,"line_start":108,"line_end":108,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150384,"byte_end":150387,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150392,"byte_end":150405,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150410,"byte_end":150413,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150418,"byte_end":150425,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150430,"byte_end":150462,"line_start":113,"line_end":113,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150467,"byte_end":150470,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150475,"byte_end":150506,"line_start":115,"line_end":115,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150511,"byte_end":150514,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ // Exclusive range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150519,"byte_end":150541,"line_start":117,"line_end":117,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..10);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150546,"byte_end":150584,"line_start":118,"line_end":118,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150589,"byte_end":150611,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0..1.3e5);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150616,"byte_end":150661,"line_start":120,"line_end":120,"column_start":5,"column_end":50}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150666,"byte_end":150688,"line_start":121,"line_end":121,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150693,"byte_end":150696,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ // Inclusive range","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150701,"byte_end":150723,"line_start":123,"line_end":123,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..=10);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150728,"byte_end":150767,"line_start":124,"line_end":124,"column_start":5,"column_end":44}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150772,"byte_end":150794,"line_start":125,"line_end":125,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150799,"byte_end":150806,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150811,"byte_end":150814,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":150819,"byte_end":150867,"line_start":128,"line_end":128,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151571,"byte_end":151577,"line_start":152,"line_end":152,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"pub fn sample<T, D: Distribution<T>>(&mut Self, D) -> T","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151095,"byte_end":151148,"line_start":138,"line_end":138,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151153,"byte_end":151156,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151161,"byte_end":151176,"line_start":140,"line_end":140,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151181,"byte_end":151184,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151189,"byte_end":151196,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151201,"byte_end":151233,"line_start":143,"line_end":143,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151238,"byte_end":151275,"line_start":144,"line_end":144,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151280,"byte_end":151283,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151288,"byte_end":151319,"line_start":146,"line_end":146,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151324,"byte_end":151372,"line_start":147,"line_end":147,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151377,"byte_end":151450,"line_start":148,"line_end":148,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151455,"byte_end":151491,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151496,"byte_end":151551,"line_start":150,"line_end":150,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151556,"byte_end":151563,"line_start":151,"line_end":151,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152978,"byte_end":152989,"line_start":192,"line_end":192,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"pub fn sample_iter<T, D>(Self, D) -> distributions::DistIter<D, Self, T> where\nD: Distribution<T>, Self: Sized","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151667,"byte_end":151741,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151746,"byte_end":151749,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151754,"byte_end":151828,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151833,"byte_end":151869,"line_start":159,"line_end":159,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151874,"byte_end":151921,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":151926,"byte_end":151997,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152002,"byte_end":152061,"line_start":162,"line_end":162,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152066,"byte_end":152069,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152074,"byte_end":152087,"line_start":164,"line_end":164,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152092,"byte_end":152095,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152100,"byte_end":152107,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152112,"byte_end":152144,"line_start":167,"line_end":167,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152149,"byte_end":152212,"line_start":168,"line_end":168,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152217,"byte_end":152220,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152225,"byte_end":152256,"line_start":170,"line_end":170,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152261,"byte_end":152264,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152269,"byte_end":152292,"line_start":172,"line_end":172,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = (&mut rng).sample_iter(Standard).take(16).collect();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152297,"byte_end":152371,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152376,"byte_end":152379,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152384,"byte_end":152398,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/ let s: String = (&mut rng).sample_iter(Alphanumeric)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152403,"byte_end":152459,"line_start":176,"line_end":176,"column_start":5,"column_end":61}},{"value":"/     .take(7)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152464,"byte_end":152480,"line_start":177,"line_end":177,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152485,"byte_end":152509,"line_start":178,"line_end":178,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152514,"byte_end":152533,"line_start":179,"line_end":179,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152538,"byte_end":152541,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152546,"byte_end":152568,"line_start":181,"line_end":181,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", (&mut rng).sample_iter(Standard).take(5)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152573,"byte_end":152634,"line_start":182,"line_end":182,"column_start":5,"column_end":66}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152639,"byte_end":152704,"line_start":183,"line_end":183,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152709,"byte_end":152712,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152717,"byte_end":152737,"line_start":185,"line_end":185,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152742,"byte_end":152791,"line_start":186,"line_end":186,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = (&mut rng).sample_iter(die_range);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152796,"byte_end":152853,"line_start":187,"line_end":187,"column_start":5,"column_end":62}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152858,"byte_end":152899,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152904,"byte_end":152948,"line_start":189,"line_end":189,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152953,"byte_end":152958,"line_start":190,"line_end":190,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":152963,"byte_end":152970,"line_start":191,"line_end":191,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153723,"byte_end":153727,"line_start":218,"line_end":218,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"pub fn fill<T: Fill + ?Sized>(&mut Self, &mut T)","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153159,"byte_end":153215,"line_start":200,"line_end":200,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153220,"byte_end":153223,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153228,"byte_end":153301,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153306,"byte_end":153368,"line_start":203,"line_end":203,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153373,"byte_end":153376,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153381,"byte_end":153450,"line_start":205,"line_end":205,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153455,"byte_end":153458,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153463,"byte_end":153476,"line_start":207,"line_end":207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153481,"byte_end":153484,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153489,"byte_end":153496,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153501,"byte_end":153533,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153538,"byte_end":153541,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153546,"byte_end":153574,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153579,"byte_end":153615,"line_start":213,"line_end":213,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153620,"byte_end":153627,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153632,"byte_end":153635,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153640,"byte_end":153679,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153684,"byte_end":153715,"line_start":217,"line_end":217,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154567,"byte_end":154575,"line_start":246,"line_end":246,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"pub fn try_fill<T: Fill + ?Sized>(&mut Self, &mut T) -> Result<(), Error>","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153859,"byte_end":153915,"line_start":222,"line_end":222,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153920,"byte_end":153923,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":153928,"byte_end":154001,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154006,"byte_end":154068,"line_start":225,"line_end":225,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154073,"byte_end":154076,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154081,"byte_end":154146,"line_start":227,"line_end":227,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154151,"byte_end":154154,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154159,"byte_end":154172,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154177,"byte_end":154180,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154185,"byte_end":154192,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154197,"byte_end":154219,"line_start":232,"line_end":232,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154224,"byte_end":154256,"line_start":233,"line_end":233,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154261,"byte_end":154264,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154269,"byte_end":154312,"line_start":235,"line_end":235,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154317,"byte_end":154345,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154350,"byte_end":154391,"line_start":237,"line_end":237,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154396,"byte_end":154408,"line_start":238,"line_end":238,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154413,"byte_end":154420,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154425,"byte_end":154428,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154433,"byte_end":154459,"line_start":241,"line_end":241,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154464,"byte_end":154471,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154476,"byte_end":154479,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154484,"byte_end":154531,"line_start":244,"line_end":244,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154536,"byte_end":154559,"line_start":245,"line_end":245,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155201,"byte_end":155209,"line_start":270,"line_end":270,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"pub fn gen_bool(&mut Self, f64) -> bool","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154681,"byte_end":154736,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154741,"byte_end":154744,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154749,"byte_end":154816,"line_start":252,"line_end":252,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154821,"byte_end":154871,"line_start":253,"line_end":253,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154876,"byte_end":154879,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154884,"byte_end":154897,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154902,"byte_end":154905,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154910,"byte_end":154917,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154922,"byte_end":154954,"line_start":258,"line_end":258,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154959,"byte_end":154962,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":154967,"byte_end":154998,"line_start":260,"line_end":260,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155003,"byte_end":155047,"line_start":261,"line_end":261,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155052,"byte_end":155059,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155064,"byte_end":155067,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155072,"byte_end":155084,"line_start":264,"line_end":264,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155089,"byte_end":155092,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155097,"byte_end":155123,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155128,"byte_end":155131,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155136,"byte_end":155179,"line_start":268,"line_end":268,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155184,"byte_end":155193,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156185,"byte_end":156194,"line_start":299,"line_end":299,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"pub fn gen_ratio(&mut Self, u32, u32) -> bool","parent":{"krate":0,"index":494},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155332,"byte_end":155404,"line_start":275,"line_end":275,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155409,"byte_end":155480,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155485,"byte_end":155559,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155564,"byte_end":155634,"line_start":278,"line_end":278,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155639,"byte_end":155677,"line_start":279,"line_end":279,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155682,"byte_end":155685,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155690,"byte_end":155757,"line_start":281,"line_end":281,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155762,"byte_end":155830,"line_start":282,"line_end":282,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155835,"byte_end":155838,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155843,"byte_end":155855,"line_start":284,"line_end":284,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155860,"byte_end":155863,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155868,"byte_end":155923,"line_start":286,"line_end":286,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155928,"byte_end":155931,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155936,"byte_end":155949,"line_start":288,"line_end":288,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155954,"byte_end":155957,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155962,"byte_end":155969,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":155974,"byte_end":156006,"line_start":291,"line_end":291,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156011,"byte_end":156014,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156019,"byte_end":156050,"line_start":293,"line_end":293,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156055,"byte_end":156095,"line_start":294,"line_end":294,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156100,"byte_end":156107,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156112,"byte_end":156115,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156120,"byte_end":156163,"line_start":297,"line_end":297,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156168,"byte_end":156177,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":515},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156743,"byte_end":156747,"line_start":314,"line_end":314,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":516}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156409,"byte_end":156455,"line_start":307,"line_end":307,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156456,"byte_end":156459,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156460,"byte_end":156531,"line_start":309,"line_end":309,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156532,"byte_end":156535,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156536,"byte_end":156606,"line_start":311,"line_end":311,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156607,"byte_end":156648,"line_start":312,"line_end":312,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156649,"byte_end":156732,"line_start":313,"line_end":313,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156792,"byte_end":156800,"line_start":316,"line_end":316,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"pub fn try_fill<R: Rng + ?Sized>(&mut Self, &mut R) -> Result<(), Error>","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156754,"byte_end":156784,"line_start":315,"line_end":315,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":524},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":543},{"krate":0,"index":571}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"/ Random number generators and adapters","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165750,"byte_end":165791,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165792,"byte_end":165795,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Background: Random number generators (RNGs)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165796,"byte_end":165846,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165847,"byte_end":165850,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165851,"byte_end":165920,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ random number generators as follows:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165921,"byte_end":165961,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165962,"byte_end":165965,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":165966,"byte_end":166046,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166047,"byte_end":166125,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166126,"byte_end":166199,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166200,"byte_end":166280,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166281,"byte_end":166360,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/     a hardware generator (HRNG).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166361,"byte_end":166397,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166398,"byte_end":166477,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166478,"byte_end":166556,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166557,"byte_end":166637,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166638,"byte_end":166714,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166715,"byte_end":166795,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166796,"byte_end":166876,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166877,"byte_end":166951,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":166952,"byte_end":167028,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167029,"byte_end":167105,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167106,"byte_end":167184,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167185,"byte_end":167188,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Traits and functionality","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167189,"byte_end":167220,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167221,"byte_end":167224,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167225,"byte_end":167300,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167301,"byte_end":167374,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ additionally implement the [`CryptoRng`] trait.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167375,"byte_end":167426,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167427,"byte_end":167430,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167431,"byte_end":167504,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167505,"byte_end":167573,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167574,"byte_end":167577,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167578,"byte_end":167633,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"/ -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167634,"byte_end":167698,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167699,"byte_end":167775,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167776,"byte_end":167839,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167840,"byte_end":167843,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167844,"byte_end":167908,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167909,"byte_end":167912,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Our generators","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167913,"byte_end":167934,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167935,"byte_end":167938,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This crate provides several random number generators:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167939,"byte_end":167996,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":167997,"byte_end":168000,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168001,"byte_end":168074,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168075,"byte_end":168148,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168149,"byte_end":168213,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168214,"byte_end":168294,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168295,"byte_end":168373,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168374,"byte_end":168448,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168449,"byte_end":168506,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/ -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168507,"byte_end":168587,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/     (based on reviews, maturity and usage). The current algorithm is ChaCha12,","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168588,"byte_end":168670,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/     which is well established and rigorously analysed.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168671,"byte_end":168729,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168730,"byte_end":168805,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/     periodic reseeding.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168806,"byte_end":168833,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168834,"byte_end":168915,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/     little memory, and have good output quality.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168916,"byte_end":168968,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168969,"byte_end":168972,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":168973,"byte_end":169050,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ release and may be platform-dependent, therefore they should be considered","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169051,"byte_end":169129,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ **not reproducible**.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169130,"byte_end":169155,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169156,"byte_end":169159,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ## Additional generators","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169160,"byte_end":169188,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169189,"byte_end":169192,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169193,"byte_end":169268,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169269,"byte_end":169332,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"/ The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169333,"byte_end":169402,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"/ entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169403,"byte_end":169473,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169474,"byte_end":169544,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169545,"byte_end":169548,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169549,"byte_end":169627,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169628,"byte_end":169701,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169702,"byte_end":169780,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ be used directly when **reproducibility** matters.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169781,"byte_end":169835,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"/ Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169836,"byte_end":169910,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169911,"byte_end":169985,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169986,"byte_end":169989,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [`Rng`]: crate::Rng","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":169990,"byte_end":170013,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170014,"byte_end":170045,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/ [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170046,"byte_end":170081,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170082,"byte_end":170121,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170122,"byte_end":170159,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170160,"byte_end":170207,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170208,"byte_end":170265,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"/ [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170266,"byte_end":170323,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/ [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170324,"byte_end":170375,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170376,"byte_end":170435,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170436,"byte_end":170483,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":525},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":1762},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":536},{"krate":0,"index":538}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"/ Mock random number generator","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":171712,"byte_end":171744,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172414,"byte_end":172421,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1763},{"krate":0,"index":1764}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":171852,"byte_end":171914,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":171915,"byte_end":171918,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":171919,"byte_end":171993,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":171994,"byte_end":172067,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172068,"byte_end":172104,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172105,"byte_end":172108,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172109,"byte_end":172116,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172117,"byte_end":172135,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172136,"byte_end":172170,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172171,"byte_end":172174,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172175,"byte_end":172215,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172216,"byte_end":172256,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172257,"byte_end":172291,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172292,"byte_end":172299,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172611,"byte_end":172614,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"pub fn new(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172470,"byte_end":172539,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172544,"byte_end":172599,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175398,"byte_end":175404,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174468,"byte_end":174546,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174547,"byte_end":174620,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174621,"byte_end":174667,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174668,"byte_end":174671,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 12 rounds. Please","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174672,"byte_end":174752,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ see this relevant [rand issue] for the discussion. This may change as new ","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174753,"byte_end":174831,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ evidence of cipher security and performance becomes available.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174832,"byte_end":174898,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174899,"byte_end":174902,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174903,"byte_end":174979,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":174980,"byte_end":175053,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175054,"byte_end":175132,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175133,"byte_end":175170,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175171,"byte_end":175174,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175175,"byte_end":175230,"line_start":34,"line_end":34,"column_start":1,"column_end":56}},{"value":"/ [rand issue]: https://github.com/rust-random/rand/issues/932","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175231,"byte_end":175295,"line_start":35,"line_end":35,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":574},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":588},{"krate":0,"index":596},{"krate":0,"index":607},{"krate":0,"index":609}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"/ Sequence-related functionality","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177264,"byte_end":177298,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177299,"byte_end":177302,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module provides:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177303,"byte_end":177328,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177329,"byte_end":177332,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177333,"byte_end":177384,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ *   [`IteratorRandom`] iterator sampling","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177385,"byte_end":177429,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177430,"byte_end":177501,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/     `0..length`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177502,"byte_end":177521,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177522,"byte_end":177525,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Also see:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177526,"byte_end":177539,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177540,"byte_end":177543,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ *   [`crate::distributions::WeightedIndex`] distribution which provides","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177544,"byte_end":177619,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/     weighted index sampling.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177620,"byte_end":177652,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177653,"byte_end":177656,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177657,"byte_end":177734,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177735,"byte_end":177810,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ small performance boost in some cases).","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":177811,"byte_end":177854,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":578},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178804,"byte_end":178815,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178222,"byte_end":178300,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178301,"byte_end":178304,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178305,"byte_end":178378,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178379,"byte_end":178454,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178455,"byte_end":178458,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178459,"byte_end":178466,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178467,"byte_end":178498,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178499,"byte_end":178502,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178503,"byte_end":178540,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"/ let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178541,"byte_end":178603,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ bytes.shuffle(&mut rng);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178604,"byte_end":178632,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178633,"byte_end":178681,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ println!(\"{}\", str);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178682,"byte_end":178706,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178707,"byte_end":178714,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178715,"byte_end":178754,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178755,"byte_end":178766,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178767,"byte_end":178785,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178786,"byte_end":178793,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":579},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178853,"byte_end":178857,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178822,"byte_end":178843,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179343,"byte_end":179349,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"pub fn choose<R>(&Self, &mut R) -> Option<&Self::Item> where R: Rng + ?Sized","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178864,"byte_end":178940,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178945,"byte_end":178964,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178969,"byte_end":178972,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":178977,"byte_end":179014,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179019,"byte_end":179022,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179027,"byte_end":179040,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179045,"byte_end":179048,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179053,"byte_end":179060,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179065,"byte_end":179090,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179095,"byte_end":179126,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179131,"byte_end":179134,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179139,"byte_end":179178,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179183,"byte_end":179214,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179219,"byte_end":179266,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179271,"byte_end":179323,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179328,"byte_end":179335,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179594,"byte_end":179604,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"pub fn choose_mut<R>(&mut Self, &mut R) -> Option<&mut Self::Item> where\nR: Rng + ?Sized","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179428,"byte_end":179498,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179503,"byte_end":179536,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179541,"byte_end":179544,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":179549,"byte_end":179586,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185927,"byte_end":185934,"line_start":244,"line_end":244,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"pub fn shuffle<R>(&mut Self, &mut R) where R: Rng + ?Sized","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185502,"byte_end":185539,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185544,"byte_end":185547,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185552,"byte_end":185603,"line_start":230,"line_end":230,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185608,"byte_end":185611,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185616,"byte_end":185629,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185634,"byte_end":185637,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185642,"byte_end":185649,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185654,"byte_end":185685,"line_start":235,"line_end":235,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185690,"byte_end":185715,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185720,"byte_end":185723,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185728,"byte_end":185759,"line_start":238,"line_end":238,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185764,"byte_end":185796,"line_start":239,"line_end":239,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185801,"byte_end":185837,"line_start":240,"line_end":240,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185842,"byte_end":185866,"line_start":241,"line_end":241,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185871,"byte_end":185907,"line_start":242,"line_end":242,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185912,"byte_end":185919,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186799,"byte_end":186814,"line_start":264,"line_end":264,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"pub fn partial_shuffle<R>(&mut Self, &mut R, usize)\n-> (&mut [Self::Item], &mut [Self::Item]) where R: Rng + ?Sized","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":185994,"byte_end":186039,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186044,"byte_end":186047,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186052,"byte_end":186124,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186129,"byte_end":186198,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186203,"byte_end":186244,"line_start":251,"line_end":251,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186249,"byte_end":186252,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186257,"byte_end":186331,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186336,"byte_end":186385,"line_start":254,"line_end":254,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186390,"byte_end":186393,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186398,"byte_end":186474,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186479,"byte_end":186525,"line_start":257,"line_end":257,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186530,"byte_end":186599,"line_start":258,"line_end":258,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186604,"byte_end":186607,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186612,"byte_end":186685,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186690,"byte_end":186722,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186727,"byte_end":186730,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186735,"byte_end":186791,"line_start":263,"line_end":263,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":588},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187484,"byte_end":187498,"line_start":288,"line_end":288,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":594}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":186944,"byte_end":187012,"line_start":270,"line_end":270,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187013,"byte_end":187016,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all iterators `I` where `I: Iterator + Sized`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187017,"byte_end":187095,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ and provides methods for","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187096,"byte_end":187124,"line_start":273,"line_end":273,"column_start":1,"column_end":29}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187125,"byte_end":187186,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187187,"byte_end":187190,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187191,"byte_end":187198,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187199,"byte_end":187233,"line_start":277,"line_end":277,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187234,"byte_end":187237,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187238,"byte_end":187275,"line_start":279,"line_end":279,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187276,"byte_end":187279,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187280,"byte_end":187323,"line_start":281,"line_end":281,"column_start":1,"column_end":26}},{"value":"/ println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187324,"byte_end":187390,"line_start":282,"line_end":282,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187391,"byte_end":187398,"line_start":283,"line_end":283,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187399,"byte_end":187438,"line_start":284,"line_end":284,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187439,"byte_end":187450,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187451,"byte_end":187465,"line_start":286,"line_end":286,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187466,"byte_end":187473,"line_start":287,"line_end":287,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":188410,"byte_end":188416,"line_start":304,"line_end":304,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"pub fn choose<R>(Self, &mut R) -> Option<Self::Item> where R: Rng + ?Sized","parent":{"krate":0,"index":588},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187523,"byte_end":187574,"line_start":289,"line_end":289,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187579,"byte_end":187582,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187587,"byte_end":187643,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187648,"byte_end":187651,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187656,"byte_end":187726,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187731,"byte_end":187805,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187810,"byte_end":187877,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187882,"byte_end":187951,"line_start":296,"line_end":296,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187956,"byte_end":188019,"line_start":297,"line_end":297,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":188024,"byte_end":188027,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Note that the output values and the number of RNG samples used","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":188032,"byte_end":188098,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ depends on size hints. In particular, `Iterator` combinators that don't","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":188103,"byte_end":188178,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ change the values yielded but change the size hints may result in","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":188183,"byte_end":188252,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ `choose` returning different elements. If you want consistent results","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":188257,"byte_end":188330,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ and RNG usage consider using [`IteratorRandom::choose_stable`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":188335,"byte_end":188402,"line_start":303,"line_end":303,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":191045,"byte_end":191058,"line_start":373,"line_end":373,"column_start":8,"column_end":21},"name":"choose_stable","qualname":"::seq::IteratorRandom::choose_stable","value":"pub fn choose_stable<R>(Self, &mut R) -> Option<Self::Item> where R: Rng +\n?Sized","parent":{"krate":0,"index":588},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190012,"byte_end":190063,"line_start":355,"line_end":355,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190068,"byte_end":190071,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190076,"byte_end":190132,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190137,"byte_end":190140,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to [`choose`] except that the result","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190145,"byte_end":190213,"line_start":359,"line_end":359,"column_start":5,"column_end":73}},{"value":"/ only depends on the length of the iterator and the values produced by","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190218,"byte_end":190291,"line_start":360,"line_end":360,"column_start":5,"column_end":78}},{"value":"/ `rng`. Notably for any iterator of a given length this will make the","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190296,"byte_end":190368,"line_start":361,"line_end":361,"column_start":5,"column_end":77}},{"value":"/ same requests to `rng` and if the same sequence of values are produced","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190373,"byte_end":190447,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ the same index will be selected from `self`. This may be useful if you","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190452,"byte_end":190526,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ need consistent results no matter what type of iterator you are working","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190531,"byte_end":190606,"line_start":364,"line_end":364,"column_start":5,"column_end":80}},{"value":"/ with. If you do not need this stability prefer [`choose`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190611,"byte_end":190673,"line_start":365,"line_end":365,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190678,"byte_end":190681,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Note that this method still uses [`Iterator::size_hint`] to skip","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190686,"byte_end":190754,"line_start":367,"line_end":367,"column_start":5,"column_end":73}},{"value":"/ constructing elements where possible, however the selection and `rng`","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190759,"byte_end":190832,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ calls are the same in the face of this optimization. If you want to","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190837,"byte_end":190908,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ force every element to be created regardless call `.inspect(|e| ())`.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190913,"byte_end":190986,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190991,"byte_end":190994,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`choose`]: IteratorRandom::choose","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":190999,"byte_end":191037,"line_start":372,"line_end":372,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":193007,"byte_end":193027,"line_start":426,"line_end":426,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"pub fn choose_multiple_fill<R>(Self, &mut R, &mut [Self::Item]) -> usize where\nR: Rng + ?Sized","parent":{"krate":0,"index":588},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192320,"byte_end":192390,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192395,"byte_end":192427,"line_start":414,"line_end":414,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192432,"byte_end":192435,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192440,"byte_end":192513,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192518,"byte_end":192590,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192595,"byte_end":192627,"line_start":418,"line_end":418,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192632,"byte_end":192635,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192640,"byte_end":192718,"line_start":420,"line_end":420,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192723,"byte_end":192801,"line_start":421,"line_end":421,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192806,"byte_end":192860,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192865,"byte_end":192868,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192873,"byte_end":192938,"line_start":424,"line_end":424,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":192943,"byte_end":192999,"line_start":425,"line_end":425,"column_start":5,"column_end":61}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18464,"byte_end":18478,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18773,"byte_end":18782,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":20665,"byte_end":20674,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27742,"byte_end":27750,"line_start":135,"line_end":135,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28318,"byte_end":28326,"line_start":155,"line_end":155,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28927,"byte_end":28934,"line_start":182,"line_end":182,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45086,"byte_end":45094,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45235,"byte_end":45243,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45386,"byte_end":45394,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45530,"byte_end":45538,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45713,"byte_end":45721,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":46016,"byte_end":46024,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55612,"byte_end":55620,"line_start":71,"line_end":71,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":56995,"byte_end":57007,"line_start":105,"line_end":105,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":58062,"byte_end":58070,"line_start":134,"line_end":134,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":59251,"byte_end":59259,"line_start":169,"line_end":169,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":61084,"byte_end":61092,"line_start":229,"line_end":229,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":61436,"byte_end":61444,"line_start":243,"line_end":243,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67223,"byte_end":67228,"line_start":70,"line_end":70,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67652,"byte_end":67657,"line_start":84,"line_end":84,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":68375,"byte_end":68385,"line_start":107,"line_end":107,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89362,"byte_end":89369,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90135,"byte_end":90142,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94043,"byte_end":94050,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94207,"byte_end":94214,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94788,"byte_end":94796,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95527,"byte_end":95532,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95832,"byte_end":95846,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110936,"byte_end":110947,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122836,"byte_end":122844,"line_start":1044,"line_end":1044,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122910,"byte_end":122925,"line_start":1048,"line_end":1048,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156403,"byte_end":156404,"line_start":305,"line_end":305,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172456,"byte_end":172463,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172759,"byte_end":172766,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175429,"byte_end":175435,"line_start":40,"line_end":40,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175891,"byte_end":175897,"line_start":62,"line_end":62,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":176206,"byte_end":176212,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":199228,"byte_end":199229,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2928,"byte_end":2941,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":22}},{"kind":"Mod","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/mod.rs","byte_start":11349,"byte_end":11356,"line_start":110,"line_end":110,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":263}},{"kind":"Mod","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2951,"byte_end":2958,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":432}},{"kind":"Mod","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2977,"byte_end":2981,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":524}},{"kind":"Mod","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mod.rs","byte_start":170583,"byte_end":170587,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":525}},{"kind":"Mod","span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/lib.rs","byte_start":2991,"byte_end":2994,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":574}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18464,"byte_end":18478,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":625},"to":{"krate":1,"index":9321}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":18773,"byte_end":18782,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/bernoulli.rs","byte_start":20665,"byte_end":20674,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":618},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":27742,"byte_end":27750,"line_start":135,"line_end":135,"column_start":28,"column_end":36},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":639},"to":{"krate":1,"index":7569}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28318,"byte_end":28326,"line_start":155,"line_end":155,"column_start":39,"column_end":47},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":639},"to":{"krate":1,"index":7837}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/distribution.rs","byte_start":28927,"byte_end":28934,"line_start":182,"line_end":182,"column_start":38,"column_end":45},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":651},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45086,"byte_end":45094,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45235,"byte_end":45243,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45386,"byte_end":45394,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45530,"byte_end":45538,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":45713,"byte_end":45721,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/integer.rs","byte_start":46016,"byte_end":46024,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":55612,"byte_end":55620,"line_start":71,"line_end":71,"column_start":29,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":56995,"byte_end":57007,"line_start":105,"line_end":105,"column_start":27,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":745},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":58062,"byte_end":58070,"line_start":134,"line_end":134,"column_start":29,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":59251,"byte_end":59259,"line_start":169,"line_end":169,"column_start":27,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":61084,"byte_end":61092,"line_start":229,"line_end":229,"column_start":37,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/other.rs","byte_start":61436,"byte_end":61444,"line_start":243,"line_end":243,"column_start":39,"column_end":47},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67223,"byte_end":67228,"line_start":70,"line_end":70,"column_start":13,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":67652,"byte_end":67657,"line_start":84,"line_end":84,"column_start":37,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1064},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/slice.rs","byte_start":68375,"byte_end":68385,"line_start":107,"line_end":107,"column_start":29,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1080},"to":{"krate":1,"index":9321}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/utils.rs","byte_start":76932,"byte_end":76937,"line_start":240,"line_end":240,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":241}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/utils.rs","byte_start":77143,"byte_end":77148,"line_start":247,"line_end":247,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":245}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/utils.rs","byte_start":77593,"byte_end":77598,"line_start":268,"line_end":268,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":89362,"byte_end":89369,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90135,"byte_end":90142,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1138},"to":{"krate":0,"index":54}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":90558,"byte_end":90563,"line_start":212,"line_end":212,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":315}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":91138,"byte_end":91143,"line_start":227,"line_end":227,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":317}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94043,"byte_end":94050,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1138},"to":{"krate":1,"index":2895}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94207,"byte_end":94214,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1138},"to":{"krate":1,"index":2895}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":94788,"byte_end":94796,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":345},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95527,"byte_end":95532,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":35377},"to":{"krate":0,"index":351}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":95832,"byte_end":95846,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":35446},"to":{"krate":0,"index":351}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":110936,"byte_end":110947,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1403},"to":{"krate":0,"index":317}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122836,"byte_end":122844,"line_start":1044,"line_end":1044,"column_start":24,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":1,"index":39423},"to":{"krate":0,"index":315}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/distributions/uniform.rs","byte_start":122910,"byte_end":122925,"line_start":1048,"line_end":1048,"column_start":25,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1454},"to":{"krate":0,"index":317}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":148566,"byte_end":148573,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":4,"index":140},"to":{"krate":0,"index":494}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rng.rs","byte_start":156403,"byte_end":156404,"line_start":305,"line_end":305,"column_start":35,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":514},"to":{"krate":0,"index":494}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172456,"byte_end":172463,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/mock.rs","byte_start":172759,"byte_end":172766,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1762},"to":{"krate":4,"index":140}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175429,"byte_end":175435,"line_start":40,"line_end":40,"column_start":18,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1776},"to":{"krate":4,"index":140}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":175891,"byte_end":175897,"line_start":62,"line_end":62,"column_start":22,"column_end":28},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1776},"to":{"krate":4,"index":146}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/rngs/std.rs","byte_start":176206,"byte_end":176212,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1776},"to":{"krate":4,"index":145}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187500,"byte_end":187508,"line_start":288,"line_end":288,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":7569},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":187511,"byte_end":187516,"line_start":288,"line_end":288,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":588}},{"span":{"file_name":"/Users/errol_hava/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.4/src/seq/mod.rs","byte_start":199228,"byte_end":199229,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":608},"to":{"krate":0,"index":588}}]}